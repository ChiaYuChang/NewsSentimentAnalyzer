// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: apikeys.sql

package model

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const cleanUpAPIKey = `-- name: CleanUpAPIKey :exec
DELETE FROM apikeys
 WHERE deleted_at IS NOT NULL
`

func (q *Queries) CleanUpAPIKey(ctx context.Context) error {
	_, err := q.db.Exec(ctx, cleanUpAPIKey)
	return err
}

const createAPIKey = `-- name: CreateAPIKey :exec
INSERT INTO apikeys (
    owner, api_id, key
) VALUES (
    $1, $2, $3
)
`

type CreateAPIKeyParams struct {
	Owner int32  `json:"owner"`
	ApiID int16  `json:"api_id"`
	Key   string `json:"key"`
}

func (q *Queries) CreateAPIKey(ctx context.Context, arg *CreateAPIKeyParams) error {
	_, err := q.db.Exec(ctx, createAPIKey, arg.Owner, arg.ApiID, arg.Key)
	return err
}

const deleteAPIKey = `-- name: DeleteAPIKey :exec
UPDATE apikeys
   SET deleted_at = CURRENT_TIMESTAMP
 WHERE owner = $1
   AND api_id = $2
`

type DeleteAPIKeyParams struct {
	Owner int32 `json:"owner"`
	ApiID int16 `json:"api_id"`
}

func (q *Queries) DeleteAPIKey(ctx context.Context, arg *DeleteAPIKeyParams) error {
	_, err := q.db.Exec(ctx, deleteAPIKey, arg.Owner, arg.ApiID)
	return err
}

const getAPIKey = `-- name: GetAPIKey :many
SELECT id, owner, api_id, key 
  FROM apikeys
 WHERE owner = $1 
   AND api_id = $2
   AND deleted_at IS NULL
`

type GetAPIKeyParams struct {
	Owner int32 `json:"owner"`
	ApiID int16 `json:"api_id"`
}

type GetAPIKeyRow struct {
	ID    int32  `json:"id"`
	Owner int32  `json:"owner"`
	ApiID int16  `json:"api_id"`
	Key   string `json:"key"`
}

func (q *Queries) GetAPIKey(ctx context.Context, arg *GetAPIKeyParams) ([]*GetAPIKeyRow, error) {
	rows, err := q.db.Query(ctx, getAPIKey, arg.Owner, arg.ApiID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetAPIKeyRow
	for rows.Next() {
		var i GetAPIKeyRow
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.ApiID,
			&i.Key,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAPIKey = `-- name: ListAPIKey :many
WITH k AS (
  SELECT id, owner, api_id, key
    FROM apikeys
   WHERE owner = $1
     AND deleted_at IS NULL
), a AS (
  SELECT id, name, type
    FROM apis
   WHERE deleted_at IS NULL
) 
SELECT k.id, k.owner, k.api_id, a.name, a.type, k.key 
  FROM k
  LEFT JOIN a
    ON k.api_id = a.id
`

type ListAPIKeyRow struct {
	ID    int32       `json:"id"`
	Owner int32       `json:"owner"`
	ApiID int16       `json:"api_id"`
	Name  pgtype.Text `json:"name"`
	Type  NullApiType `json:"type"`
	Key   string      `json:"key"`
}

func (q *Queries) ListAPIKey(ctx context.Context, owner int32) ([]*ListAPIKeyRow, error) {
	rows, err := q.db.Query(ctx, listAPIKey, owner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ListAPIKeyRow
	for rows.Next() {
		var i ListAPIKeyRow
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.ApiID,
			&i.Name,
			&i.Type,
			&i.Key,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAPIKey = `-- name: UpdateAPIKey :exec
UPDATE apikeys
   SET key = $1,
       api_id = $3,
       updated_at = CURRENT_TIMESTAMP
 WHERE owner = $2
   AND api_id = $4
   AND deleted_at IS NULL
`

type UpdateAPIKeyParams struct {
	Key      string `json:"key"`
	Owner    int32  `json:"owner"`
	OldApiID int16  `json:"old_api_id"`
	NewApiID int16  `json:"new_api_id"`
}

func (q *Queries) UpdateAPIKey(ctx context.Context, arg *UpdateAPIKeyParams) error {
	_, err := q.db.Exec(ctx, updateAPIKey,
		arg.Key,
		arg.Owner,
		arg.OldApiID,
		arg.NewApiID,
	)
	return err
}
