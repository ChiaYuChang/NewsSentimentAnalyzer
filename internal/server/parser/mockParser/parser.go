// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ChiaYuChang/NewsSentimentAnalyzer/internal/server/parser (interfaces: Parser,StdParseProcess)

// Package mock_parser is a generated GoMock package.
package mock_parser

import (
	url "net/url"
	reflect "reflect"

	parser "github.com/ChiaYuChang/NewsSentimentAnalyzer/internal/server/parser"
	goquery "github.com/PuerkitoBio/goquery"
	gomock "github.com/golang/mock/gomock"
)

// MockParser is a mock of Parser interface.
type MockParser struct {
	ctrl     *gomock.Controller
	recorder *MockParserMockRecorder
}

// MockParserMockRecorder is the mock recorder for MockParser.
type MockParserMockRecorder struct {
	mock *MockParser
}

// NewMockParser creates a new mock instance.
func NewMockParser(ctrl *gomock.Controller) *MockParser {
	mock := &MockParser{ctrl: ctrl}
	mock.recorder = &MockParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParser) EXPECT() *MockParserMockRecorder {
	return m.recorder
}

// Domain mocks base method.
func (m *MockParser) Domain() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Domain")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Domain indicates an expected call of Domain.
func (mr *MockParserMockRecorder) Domain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Domain", reflect.TypeOf((*MockParser)(nil).Domain))
}

// Parse mocks base method.
func (m *MockParser) Parse(arg0 *parser.Query) *parser.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", arg0)
	ret0, _ := ret[0].(*parser.Query)
	return ret0
}

// Parse indicates an expected call of Parse.
func (mr *MockParserMockRecorder) Parse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockParser)(nil).Parse), arg0)
}

// ToGUID mocks base method.
func (m *MockParser) ToGUID(arg0 *url.URL) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToGUID", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// ToGUID indicates an expected call of ToGUID.
func (mr *MockParserMockRecorder) ToGUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToGUID", reflect.TypeOf((*MockParser)(nil).ToGUID), arg0)
}

// MockStdParseProcess is a mock of StdParseProcess interface.
type MockStdParseProcess struct {
	ctrl     *gomock.Controller
	recorder *MockStdParseProcessMockRecorder
}

// MockStdParseProcessMockRecorder is the mock recorder for MockStdParseProcess.
type MockStdParseProcessMockRecorder struct {
	mock *MockStdParseProcess
}

// NewMockStdParseProcess creates a new mock instance.
func NewMockStdParseProcess(ctrl *gomock.Controller) *MockStdParseProcess {
	mock := &MockStdParseProcess{ctrl: ctrl}
	mock.recorder = &MockStdParseProcessMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStdParseProcess) EXPECT() *MockStdParseProcessMockRecorder {
	return m.recorder
}

// ParseBody mocks base method.
func (m *MockStdParseProcess) ParseBody(arg0 *parser.News, arg1 *goquery.Selection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseBody", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ParseBody indicates an expected call of ParseBody.
func (mr *MockStdParseProcessMockRecorder) ParseBody(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseBody", reflect.TypeOf((*MockStdParseProcess)(nil).ParseBody), arg0, arg1)
}

// ParseJsonLD mocks base method.
func (m *MockStdParseProcess) ParseJsonLD(arg0 *parser.News, arg1 *goquery.Selection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseJsonLD", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ParseJsonLD indicates an expected call of ParseJsonLD.
func (mr *MockStdParseProcessMockRecorder) ParseJsonLD(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseJsonLD", reflect.TypeOf((*MockStdParseProcess)(nil).ParseJsonLD), arg0, arg1)
}

// ParseMeta mocks base method.
func (m *MockStdParseProcess) ParseMeta(arg0 *parser.News, arg1 *goquery.Selection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseMeta", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ParseMeta indicates an expected call of ParseMeta.
func (mr *MockStdParseProcessMockRecorder) ParseMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseMeta", reflect.TypeOf((*MockStdParseProcess)(nil).ParseMeta), arg0, arg1)
}

// ToGUID mocks base method.
func (m *MockStdParseProcess) ToGUID(arg0 *url.URL) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToGUID", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// ToGUID indicates an expected call of ToGUID.
func (mr *MockStdParseProcessMockRecorder) ToGUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToGUID", reflect.TypeOf((*MockStdParseProcess)(nil).ToGUID), arg0)
}
