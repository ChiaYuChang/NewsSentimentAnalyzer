// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: proto/news_parser/news_parser.proto

package newsParser

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	URLParser_HealthCheck_FullMethodName = "/newsParser.URLParser/HealthCheck"
	URLParser_ParseUrl_FullMethodName    = "/newsParser.URLParser/ParseUrl"
	URLParser_GetGUID_FullMethodName     = "/newsParser.URLParser/GetGUID"
)

// URLParserClient is the client API for URLParser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type URLParserClient interface {
	HealthCheck(ctx context.Context, in *PingPong, opts ...grpc.CallOption) (*PingPong, error)
	ParseUrl(ctx context.Context, in *ParseURLRequest, opts ...grpc.CallOption) (*ParseURLResponse, error)
	GetGUID(ctx context.Context, in *GetGUIDRequest, opts ...grpc.CallOption) (*GetGUIDResponse, error)
}

type uRLParserClient struct {
	cc grpc.ClientConnInterface
}

func NewURLParserClient(cc grpc.ClientConnInterface) URLParserClient {
	return &uRLParserClient{cc}
}

func (c *uRLParserClient) HealthCheck(ctx context.Context, in *PingPong, opts ...grpc.CallOption) (*PingPong, error) {
	out := new(PingPong)
	err := c.cc.Invoke(ctx, URLParser_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLParserClient) ParseUrl(ctx context.Context, in *ParseURLRequest, opts ...grpc.CallOption) (*ParseURLResponse, error) {
	out := new(ParseURLResponse)
	err := c.cc.Invoke(ctx, URLParser_ParseUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLParserClient) GetGUID(ctx context.Context, in *GetGUIDRequest, opts ...grpc.CallOption) (*GetGUIDResponse, error) {
	out := new(GetGUIDResponse)
	err := c.cc.Invoke(ctx, URLParser_GetGUID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// URLParserServer is the server API for URLParser service.
// All implementations must embed UnimplementedURLParserServer
// for forward compatibility
type URLParserServer interface {
	HealthCheck(context.Context, *PingPong) (*PingPong, error)
	ParseUrl(context.Context, *ParseURLRequest) (*ParseURLResponse, error)
	GetGUID(context.Context, *GetGUIDRequest) (*GetGUIDResponse, error)
	mustEmbedUnimplementedURLParserServer()
}

// UnimplementedURLParserServer must be embedded to have forward compatible implementations.
type UnimplementedURLParserServer struct {
}

func (UnimplementedURLParserServer) HealthCheck(context.Context, *PingPong) (*PingPong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedURLParserServer) ParseUrl(context.Context, *ParseURLRequest) (*ParseURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseUrl not implemented")
}
func (UnimplementedURLParserServer) GetGUID(context.Context, *GetGUIDRequest) (*GetGUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGUID not implemented")
}
func (UnimplementedURLParserServer) mustEmbedUnimplementedURLParserServer() {}

// UnsafeURLParserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to URLParserServer will
// result in compilation errors.
type UnsafeURLParserServer interface {
	mustEmbedUnimplementedURLParserServer()
}

func RegisterURLParserServer(s grpc.ServiceRegistrar, srv URLParserServer) {
	s.RegisterService(&URLParser_ServiceDesc, srv)
}

func _URLParser_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingPong)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLParserServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLParser_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLParserServer).HealthCheck(ctx, req.(*PingPong))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLParser_ParseUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLParserServer).ParseUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLParser_ParseUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLParserServer).ParseUrl(ctx, req.(*ParseURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLParser_GetGUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLParserServer).GetGUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLParser_GetGUID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLParserServer).GetGUID(ctx, req.(*GetGUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// URLParser_ServiceDesc is the grpc.ServiceDesc for URLParser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var URLParser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "newsParser.URLParser",
	HandlerType: (*URLParserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _URLParser_HealthCheck_Handler,
		},
		{
			MethodName: "ParseUrl",
			Handler:    _URLParser_ParseUrl_Handler,
		},
		{
			MethodName: "GetGUID",
			Handler:    _URLParser_GetGUID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/news_parser/news_parser.proto",
}
