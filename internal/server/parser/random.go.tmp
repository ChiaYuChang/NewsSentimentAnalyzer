package parser

import (
	"fmt"
	"math/rand"
	"net/url"
	"time"

	rg "github.com/ChiaYuChang/NewsSentimentAnalyzer/pkgs/randanGenerator"
)

type RandomParser struct {
	domain  []string
	charset rg.CharSet
}

func NewRandomParser(domain []string, seed int64) *RandomParser {
	cs, _ := rg.Alphabet.Clone()
	cs.SetRand(rg.NewMRand(seed))
	return &RandomParser{
		domain:  domain,
		charset: cs,
	}
}

func (p RandomParser) Parse(q *Query) *Query {
	fmt.Println("call random parser")

	author := make([]string, rand.Intn(2)+1)
	for i := range author {
		author[i] = rg.Must(p.charset.GenRdmString(rand.Intn(10) + 5))
	}

	tag := make([]string, rand.Intn(3)+2)
	for i := range tag {
		tag[i] = rg.Must(p.charset.GenRdmString(rand.Intn(3) + 5))
	}

	q.News = &News{
		Title:       rg.Must(p.charset.GenRdmString(rand.Intn(20) + 10)),
		Link:        q.URL,
		Description: rg.Must(p.charset.GenRdmString(rand.Intn(30) + 50)),
		Language:    "en-us",
		Author:      author,
		Category:    rg.Must(p.charset.GenRdmString(rand.Intn(10) + 5)),
		GUID:        q.URL.Path,
		PubDate:     rg.GenRdnTime(time.Now().Add(-10*24*time.Hour), time.Now()),
		Tag:         tag,
		RelatedGUID: []string{},
	}

	return q
}

func (p RandomParser) ToGUID(href *url.URL) string {
	return href.Path
}

func (p RandomParser) Domain() []string {
	return p.domain
}
