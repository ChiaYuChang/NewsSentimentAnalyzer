// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ChiaYuChang/NewsSentimentAnalyzer/internal/server/model (interfaces: Store)

// Package mock_model is a generated GoMock package.
package mock_model

import (
	context "context"
	reflect "reflect"

	model "github.com/ChiaYuChang/NewsSentimentAnalyzer/internal/server/model"
	gomock "github.com/golang/mock/gomock"
	pgtype "github.com/jackc/pgx/v5/pgtype"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CleanUpAPIKey mocks base method.
func (m *MockStore) CleanUpAPIKey(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanUpAPIKey", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CleanUpAPIKey indicates an expected call of CleanUpAPIKey.
func (mr *MockStoreMockRecorder) CleanUpAPIKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanUpAPIKey", reflect.TypeOf((*MockStore)(nil).CleanUpAPIKey), arg0)
}

// CleanUpAPIs mocks base method.
func (m *MockStore) CleanUpAPIs(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanUpAPIs", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CleanUpAPIs indicates an expected call of CleanUpAPIs.
func (mr *MockStoreMockRecorder) CleanUpAPIs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanUpAPIs", reflect.TypeOf((*MockStore)(nil).CleanUpAPIs), arg0)
}

// CleanUpJobs mocks base method.
func (m *MockStore) CleanUpJobs(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanUpJobs", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CleanUpJobs indicates an expected call of CleanUpJobs.
func (mr *MockStoreMockRecorder) CleanUpJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanUpJobs", reflect.TypeOf((*MockStore)(nil).CleanUpJobs), arg0)
}

// CleanUpUsers mocks base method.
func (m *MockStore) CleanUpUsers(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanUpUsers", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CleanUpUsers indicates an expected call of CleanUpUsers.
func (mr *MockStoreMockRecorder) CleanUpUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanUpUsers", reflect.TypeOf((*MockStore)(nil).CleanUpUsers), arg0)
}

// Close mocks base method.
func (m *MockStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStore)(nil).Close))
}

// CreateAPI mocks base method.
func (m *MockStore) CreateAPI(arg0 context.Context, arg1 *model.CreateAPIParams) (int16, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAPI", arg0, arg1)
	ret0, _ := ret[0].(int16)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAPI indicates an expected call of CreateAPI.
func (mr *MockStoreMockRecorder) CreateAPI(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAPI", reflect.TypeOf((*MockStore)(nil).CreateAPI), arg0, arg1)
}

// CreateAPIKey mocks base method.
func (m *MockStore) CreateAPIKey(arg0 context.Context, arg1 *model.CreateAPIKeyParams) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAPIKey", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAPIKey indicates an expected call of CreateAPIKey.
func (mr *MockStoreMockRecorder) CreateAPIKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAPIKey", reflect.TypeOf((*MockStore)(nil).CreateAPIKey), arg0, arg1)
}

// CreateJob mocks base method.
func (m *MockStore) CreateJob(arg0 context.Context, arg1 *model.CreateJobParams) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJob indicates an expected call of CreateJob.
func (mr *MockStoreMockRecorder) CreateJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockStore)(nil).CreateJob), arg0, arg1)
}

// CreateKeyword mocks base method.
func (m *MockStore) CreateKeyword(arg0 context.Context, arg1 *model.CreateKeywordParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeyword", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeyword indicates an expected call of CreateKeyword.
func (mr *MockStoreMockRecorder) CreateKeyword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeyword", reflect.TypeOf((*MockStore)(nil).CreateKeyword), arg0, arg1)
}

// CreateLog mocks base method.
func (m *MockStore) CreateLog(arg0 context.Context, arg1 *model.CreateLogParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLog", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLog indicates an expected call of CreateLog.
func (mr *MockStoreMockRecorder) CreateLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLog", reflect.TypeOf((*MockStore)(nil).CreateLog), arg0, arg1)
}

// CreateNews mocks base method.
func (m *MockStore) CreateNews(arg0 context.Context, arg1 *model.CreateNewsParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNews", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNews indicates an expected call of CreateNews.
func (mr *MockStoreMockRecorder) CreateNews(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNews", reflect.TypeOf((*MockStore)(nil).CreateNews), arg0, arg1)
}

// CreateNewsJob mocks base method.
func (m *MockStore) CreateNewsJob(arg0 context.Context, arg1 *model.CreateNewsJobParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewsJob", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewsJob indicates an expected call of CreateNewsJob.
func (mr *MockStoreMockRecorder) CreateNewsJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewsJob", reflect.TypeOf((*MockStore)(nil).CreateNewsJob), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 *model.CreateUserParams) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteAPI mocks base method.
func (m *MockStore) DeleteAPI(arg0 context.Context, arg1 int16) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAPI", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAPI indicates an expected call of DeleteAPI.
func (mr *MockStoreMockRecorder) DeleteAPI(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPI", reflect.TypeOf((*MockStore)(nil).DeleteAPI), arg0, arg1)
}

// DeleteAPIKey mocks base method.
func (m *MockStore) DeleteAPIKey(arg0 context.Context, arg1 *model.DeleteAPIKeyParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAPIKey", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAPIKey indicates an expected call of DeleteAPIKey.
func (mr *MockStoreMockRecorder) DeleteAPIKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPIKey", reflect.TypeOf((*MockStore)(nil).DeleteAPIKey), arg0, arg1)
}

// DeleteJob mocks base method.
func (m *MockStore) DeleteJob(arg0 context.Context, arg1 *model.DeleteJobParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJob", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJob indicates an expected call of DeleteJob.
func (mr *MockStoreMockRecorder) DeleteJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJob", reflect.TypeOf((*MockStore)(nil).DeleteJob), arg0, arg1)
}

// DeleteKeyword mocks base method.
func (m *MockStore) DeleteKeyword(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeyword", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKeyword indicates an expected call of DeleteKeyword.
func (mr *MockStoreMockRecorder) DeleteKeyword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeyword", reflect.TypeOf((*MockStore)(nil).DeleteKeyword), arg0, arg1)
}

// DeleteNews mocks base method.
func (m *MockStore) DeleteNews(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNews", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNews indicates an expected call of DeleteNews.
func (mr *MockStoreMockRecorder) DeleteNews(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNews", reflect.TypeOf((*MockStore)(nil).DeleteNews), arg0, arg1)
}

// DeleteNewsPublishBefore mocks base method.
func (m *MockStore) DeleteNewsPublishBefore(arg0 context.Context, arg1 pgtype.Timestamptz) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNewsPublishBefore", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNewsPublishBefore indicates an expected call of DeleteNewsPublishBefore.
func (mr *MockStoreMockRecorder) DeleteNewsPublishBefore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNewsPublishBefore", reflect.TypeOf((*MockStore)(nil).DeleteNewsPublishBefore), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 int32) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// DoCheckAndUpdateUserPasswordTx mocks base method.
func (m *MockStore) DoCheckAndUpdateUserPasswordTx(arg0 context.Context, arg1 *model.CheckAndUpdateUserPasswordTxParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoCheckAndUpdateUserPasswordTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoCheckAndUpdateUserPasswordTx indicates an expected call of DoCheckAndUpdateUserPasswordTx.
func (mr *MockStoreMockRecorder) DoCheckAndUpdateUserPasswordTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoCheckAndUpdateUserPasswordTx", reflect.TypeOf((*MockStore)(nil).DoCheckAndUpdateUserPasswordTx), arg0, arg1)
}

// GetAPIKey mocks base method.
func (m *MockStore) GetAPIKey(arg0 context.Context, arg1 *model.GetAPIKeyParams) ([]*model.GetAPIKeyRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIKey", arg0, arg1)
	ret0, _ := ret[0].([]*model.GetAPIKeyRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIKey indicates an expected call of GetAPIKey.
func (mr *MockStoreMockRecorder) GetAPIKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIKey", reflect.TypeOf((*MockStore)(nil).GetAPIKey), arg0, arg1)
}

// GetJobsByOwner mocks base method.
func (m *MockStore) GetJobsByOwner(arg0 context.Context, arg1 *model.GetJobsByOwnerParams) ([]*model.GetJobsByOwnerRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobsByOwner", arg0, arg1)
	ret0, _ := ret[0].([]*model.GetJobsByOwnerRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobsByOwner indicates an expected call of GetJobsByOwner.
func (mr *MockStoreMockRecorder) GetJobsByOwner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobsByOwner", reflect.TypeOf((*MockStore)(nil).GetJobsByOwner), arg0, arg1)
}

// GetKeywordsByNewsId mocks base method.
func (m *MockStore) GetKeywordsByNewsId(arg0 context.Context, arg1 []int32) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeywordsByNewsId", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeywordsByNewsId indicates an expected call of GetKeywordsByNewsId.
func (mr *MockStoreMockRecorder) GetKeywordsByNewsId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeywordsByNewsId", reflect.TypeOf((*MockStore)(nil).GetKeywordsByNewsId), arg0, arg1)
}

// GetLogByUserId mocks base method.
func (m *MockStore) GetLogByUserId(arg0 context.Context, arg1 *model.GetLogByUserIdParams) ([]*model.Log, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogByUserId", arg0, arg1)
	ret0, _ := ret[0].([]*model.Log)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogByUserId indicates an expected call of GetLogByUserId.
func (mr *MockStoreMockRecorder) GetLogByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogByUserId", reflect.TypeOf((*MockStore)(nil).GetLogByUserId), arg0, arg1)
}

// GetLogByUserIdNext mocks base method.
func (m *MockStore) GetLogByUserIdNext(arg0 context.Context, arg1 *model.GetLogByUserIdNextParams) ([]*model.Log, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogByUserIdNext", arg0, arg1)
	ret0, _ := ret[0].([]*model.Log)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogByUserIdNext indicates an expected call of GetLogByUserIdNext.
func (mr *MockStoreMockRecorder) GetLogByUserIdNext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogByUserIdNext", reflect.TypeOf((*MockStore)(nil).GetLogByUserIdNext), arg0, arg1)
}

// GetNewsByJob mocks base method.
func (m *MockStore) GetNewsByJob(arg0 context.Context) ([]*model.GetNewsByJobRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewsByJob", arg0)
	ret0, _ := ret[0].([]*model.GetNewsByJobRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewsByJob indicates an expected call of GetNewsByJob.
func (mr *MockStoreMockRecorder) GetNewsByJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewsByJob", reflect.TypeOf((*MockStore)(nil).GetNewsByJob), arg0)
}

// GetNewsByKeywords mocks base method.
func (m *MockStore) GetNewsByKeywords(arg0 context.Context, arg1 []string) ([]*model.GetNewsByKeywordsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewsByKeywords", arg0, arg1)
	ret0, _ := ret[0].([]*model.GetNewsByKeywordsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewsByKeywords indicates an expected call of GetNewsByKeywords.
func (mr *MockStoreMockRecorder) GetNewsByKeywords(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewsByKeywords", reflect.TypeOf((*MockStore)(nil).GetNewsByKeywords), arg0, arg1)
}

// GetNewsByMD5Hash mocks base method.
func (m *MockStore) GetNewsByMD5Hash(arg0 context.Context, arg1 string) (*model.GetNewsByMD5HashRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewsByMD5Hash", arg0, arg1)
	ret0, _ := ret[0].(*model.GetNewsByMD5HashRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewsByMD5Hash indicates an expected call of GetNewsByMD5Hash.
func (mr *MockStoreMockRecorder) GetNewsByMD5Hash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewsByMD5Hash", reflect.TypeOf((*MockStore)(nil).GetNewsByMD5Hash), arg0, arg1)
}

// GetNewsPublishBetween mocks base method.
func (m *MockStore) GetNewsPublishBetween(arg0 context.Context, arg1 *model.GetNewsPublishBetweenParams) ([]*model.GetNewsPublishBetweenRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewsPublishBetween", arg0, arg1)
	ret0, _ := ret[0].([]*model.GetNewsPublishBetweenRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewsPublishBetween indicates an expected call of GetNewsPublishBetween.
func (mr *MockStoreMockRecorder) GetNewsPublishBetween(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewsPublishBetween", reflect.TypeOf((*MockStore)(nil).GetNewsPublishBetween), arg0, arg1)
}

// GetUserAuth mocks base method.
func (m *MockStore) GetUserAuth(arg0 context.Context, arg1 string) (*model.GetUserAuthRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAuth", arg0, arg1)
	ret0, _ := ret[0].(*model.GetUserAuthRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAuth indicates an expected call of GetUserAuth.
func (mr *MockStoreMockRecorder) GetUserAuth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAuth", reflect.TypeOf((*MockStore)(nil).GetUserAuth), arg0, arg1)
}

// ListAPI mocks base method.
func (m *MockStore) ListAPI(arg0 context.Context, arg1 int32) ([]*model.ListAPIRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAPI", arg0, arg1)
	ret0, _ := ret[0].([]*model.ListAPIRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAPI indicates an expected call of ListAPI.
func (mr *MockStoreMockRecorder) ListAPI(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAPI", reflect.TypeOf((*MockStore)(nil).ListAPI), arg0, arg1)
}

// ListAPIKey mocks base method.
func (m *MockStore) ListAPIKey(arg0 context.Context, arg1 int32) ([]*model.ListAPIKeyRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAPIKey", arg0, arg1)
	ret0, _ := ret[0].([]*model.ListAPIKeyRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAPIKey indicates an expected call of ListAPIKey.
func (mr *MockStoreMockRecorder) ListAPIKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAPIKey", reflect.TypeOf((*MockStore)(nil).ListAPIKey), arg0, arg1)
}

// ListRecentNNews mocks base method.
func (m *MockStore) ListRecentNNews(arg0 context.Context, arg1 int32) ([]*model.ListRecentNNewsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecentNNews", arg0, arg1)
	ret0, _ := ret[0].([]*model.ListRecentNNewsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecentNNews indicates an expected call of ListRecentNNews.
func (mr *MockStoreMockRecorder) ListRecentNNews(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecentNNews", reflect.TypeOf((*MockStore)(nil).ListRecentNNews), arg0, arg1)
}

// UpdateAPI mocks base method.
func (m *MockStore) UpdateAPI(arg0 context.Context, arg1 *model.UpdateAPIParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAPI", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAPI indicates an expected call of UpdateAPI.
func (mr *MockStoreMockRecorder) UpdateAPI(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAPI", reflect.TypeOf((*MockStore)(nil).UpdateAPI), arg0, arg1)
}

// UpdateAPIKey mocks base method.
func (m *MockStore) UpdateAPIKey(arg0 context.Context, arg1 *model.UpdateAPIKeyParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAPIKey", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAPIKey indicates an expected call of UpdateAPIKey.
func (mr *MockStoreMockRecorder) UpdateAPIKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAPIKey", reflect.TypeOf((*MockStore)(nil).UpdateAPIKey), arg0, arg1)
}

// UpdateJobStatus mocks base method.
func (m *MockStore) UpdateJobStatus(arg0 context.Context, arg1 *model.UpdateJobStatusParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobStatus", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJobStatus indicates an expected call of UpdateJobStatus.
func (mr *MockStoreMockRecorder) UpdateJobStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobStatus", reflect.TypeOf((*MockStore)(nil).UpdateJobStatus), arg0, arg1)
}

// UpdatePassword mocks base method.
func (m *MockStore) UpdatePassword(arg0 context.Context, arg1 *model.UpdatePasswordParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockStoreMockRecorder) UpdatePassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockStore)(nil).UpdatePassword), arg0, arg1)
}
