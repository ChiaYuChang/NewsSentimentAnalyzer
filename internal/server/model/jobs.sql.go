// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: jobs.sql

package model

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const cleanUpJobs = `-- name: CleanUpJobs :execrows
DELETE FROM jobs
 WHERE deleted_at IS NOT NULL
`

func (q *Queries) CleanUpJobs(ctx context.Context) (int64, error) {
	result, err := q.db.Exec(ctx, cleanUpJobs)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const createJob = `-- name: CreateJob :one
INSERT INTO jobs (
  owner, status, src_api_id, src_query, llm_api_id, llm_query
) VALUES (
    $1, $2, $3, $4, $5, $6
) 
RETURNING id
`

type CreateJobParams struct {
	Owner    int32     `json:"owner"`
	Status   JobStatus `json:"status"`
	SrcApiID int16     `json:"src_api_id"`
	SrcQuery string    `json:"src_query"`
	LlmApiID int16     `json:"llm_api_id"`
	LlmQuery string    `json:"llm_query"`
}

func (q *Queries) CreateJob(ctx context.Context, arg *CreateJobParams) (int32, error) {
	row := q.db.QueryRow(ctx, createJob,
		arg.Owner,
		arg.Status,
		arg.SrcApiID,
		arg.SrcQuery,
		arg.LlmApiID,
		arg.LlmQuery,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteJob = `-- name: DeleteJob :execrows
UPDATE jobs
   SET deleted_at = CURRENT_TIMESTAMP
 WHERE id = $1
   AND owner = $2
`

type DeleteJobParams struct {
	ID    int32 `json:"id"`
	Owner int32 `json:"owner"`
}

func (q *Queries) DeleteJob(ctx context.Context, arg *DeleteJobParams) (int64, error) {
	result, err := q.db.Exec(ctx, deleteJob, arg.ID, arg.Owner)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getJobsByOwner = `-- name: GetJobsByOwner :many
SELECT id, owner, status, src_api_id, src_query, llm_api_id, llm_query, created_at, updated_at
  FROM jobs
 WHERE owner = $1
   AND deleted_at IS NULL
 ORDER BY 
       updated_at DESC,
       status     DESC
 LIMIT $2::int
`

type GetJobsByOwnerParams struct {
	Owner int32 `json:"owner"`
	N     int32 `json:"n"`
}

type GetJobsByOwnerRow struct {
	ID        int32              `json:"id"`
	Owner     int32              `json:"owner"`
	Status    JobStatus          `json:"status"`
	SrcApiID  int16              `json:"src_api_id"`
	SrcQuery  string             `json:"src_query"`
	LlmApiID  int16              `json:"llm_api_id"`
	LlmQuery  string             `json:"llm_query"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) GetJobsByOwner(ctx context.Context, arg *GetJobsByOwnerParams) ([]*GetJobsByOwnerRow, error) {
	rows, err := q.db.Query(ctx, getJobsByOwner, arg.Owner, arg.N)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetJobsByOwnerRow
	for rows.Next() {
		var i GetJobsByOwnerRow
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Status,
			&i.SrcApiID,
			&i.SrcQuery,
			&i.LlmApiID,
			&i.LlmQuery,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateJobStatus = `-- name: UpdateJobStatus :execrows
UPDATE jobs
   SET status = $1,
       updated_at = CURRENT_TIMESTAMP
 WHERE id = $2
   AND owner = $3
   AND deleted_at IS NULL
`

type UpdateJobStatusParams struct {
	Status JobStatus `json:"status"`
	ID     int32     `json:"id"`
	Owner  int32     `json:"owner"`
}

func (q *Queries) UpdateJobStatus(ctx context.Context, arg *UpdateJobStatusParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateJobStatus, arg.Status, arg.ID, arg.Owner)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
