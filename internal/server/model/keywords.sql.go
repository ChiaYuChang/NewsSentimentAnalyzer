// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: keywords.sql

package model

import (
	"context"
)

const cleanUpKeywords = `-- name: CleanUpKeywords :exec
DELETE FROM keywords
 WHERE deleted_at IS NOT NULL
`

func (q *Queries) CleanUpKeywords(ctx context.Context) error {
	_, err := q.db.Exec(ctx, cleanUpKeywords)
	return err
}

const createKeyword = `-- name: CreateKeyword :exec
INSERT INTO keywords (
    news_id, keyword
) VALUES (
    $1, $2
)
`

type CreateKeywordParams struct {
	NewsID  int64  `json:"news_id"`
	Keyword string `json:"keyword"`
}

func (q *Queries) CreateKeyword(ctx context.Context, arg *CreateKeywordParams) error {
	_, err := q.db.Exec(ctx, createKeyword, arg.NewsID, arg.Keyword)
	return err
}

const deleteKeyword = `-- name: DeleteKeyword :exec
UPDATE keywords
   SET deleted_at = CURRENT_TIMESTAMP
 WHERE keyword = $1
`

func (q *Queries) DeleteKeyword(ctx context.Context, keyword string) error {
	_, err := q.db.Exec(ctx, deleteKeyword, keyword)
	return err
}

const deleteKeywordByNewsId = `-- name: DeleteKeywordByNewsId :exec
UPDATE keywords
   SET deleted_at = CURRENT_TIMESTAMP
 WHERE news_id = $1
`

func (q *Queries) DeleteKeywordByNewsId(ctx context.Context, newsID int64) error {
	_, err := q.db.Exec(ctx, deleteKeywordByNewsId, newsID)
	return err
}

const getKeywordsByNewsId = `-- name: GetKeywordsByNewsId :many
SELECT keyword
  FROM keywords
 WHERE news_id = ANY($1::int[]) 
   AND deleted_at IS NULL
`

func (q *Queries) GetKeywordsByNewsId(ctx context.Context, newsID []int32) ([]string, error) {
	rows, err := q.db.Query(ctx, getKeywordsByNewsId, newsID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var keyword string
		if err := rows.Scan(&keyword); err != nil {
			return nil, err
		}
		items = append(items, keyword)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
