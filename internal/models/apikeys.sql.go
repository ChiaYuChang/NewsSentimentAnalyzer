// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: apikeys.sql

package models

import (
	"context"
)

const createAPIKey = `-- name: CreateAPIKey :exec
INSERT INTO apikeys (
    owner, api_id, key
) VALUES (
    $1, $2, $3
)
`

type CreateAPIKeyParams struct {
	Owner int32  `json:"owner"`
	ApiID int16  `json:"api_id"`
	Key   string `json:"key"`
}

func (q *Queries) CreateAPIKey(ctx context.Context, arg *CreateAPIKeyParams) error {
	_, err := q.exec(ctx, q.createAPIKeyStmt, createAPIKey, arg.Owner, arg.ApiID, arg.Key)
	return err
}

const deleteAPIKey = `-- name: DeleteAPIKey :exec
UPDATE apikeys
   SET deleted_at = CURRENT_TIMESTAMP
 WHERE owner = $1
   AND api_id = $2
`

type DeleteAPIKeyParams struct {
	Owner int32 `json:"owner"`
	ApiID int16 `json:"api_id"`
}

func (q *Queries) DeleteAPIKey(ctx context.Context, arg *DeleteAPIKeyParams) error {
	_, err := q.exec(ctx, q.deleteAPIKeyStmt, deleteAPIKey, arg.Owner, arg.ApiID)
	return err
}

const getAPIKey = `-- name: GetAPIKey :one
SELECT id, owner, api_id, key FROM apikeys
 WHERE owner = $1 
   AND api_id = $2
`

type GetAPIKeyParams struct {
	Owner int32 `json:"owner"`
	ApiID int16 `json:"api_id"`
}

type GetAPIKeyRow struct {
	ID    int32  `json:"id"`
	Owner int32  `json:"owner"`
	ApiID int16  `json:"api_id"`
	Key   string `json:"key"`
}

func (q *Queries) GetAPIKey(ctx context.Context, arg *GetAPIKeyParams) (*GetAPIKeyRow, error) {
	row := q.queryRow(ctx, q.getAPIKeyStmt, getAPIKey, arg.Owner, arg.ApiID)
	var i GetAPIKeyRow
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.ApiID,
		&i.Key,
	)
	return &i, err
}

const hardAPIKey = `-- name: HardAPIKey :exec
DELETE FROM apikeys
 WHERE owner = $1
   AND api_id = $2
`

type HardAPIKeyParams struct {
	Owner int32 `json:"owner"`
	ApiID int16 `json:"api_id"`
}

func (q *Queries) HardAPIKey(ctx context.Context, arg *HardAPIKeyParams) error {
	_, err := q.exec(ctx, q.hardAPIKeyStmt, hardAPIKey, arg.Owner, arg.ApiID)
	return err
}

const updateAPIKey = `-- name: UpdateAPIKey :exec
UPDATE apikeys
   SET key = $1,
       api_id = $2,
       updated_at = CURRENT_TIMESTAMP
 WHERE owner = $3
   AND api_id = $4
`

type UpdateAPIKeyParams struct {
	Key     string `json:"key"`
	ApiID   int16  `json:"api_id"`
	Owner   int32  `json:"owner"`
	ApiID_2 int16  `json:"api_id_2"`
}

func (q *Queries) UpdateAPIKey(ctx context.Context, arg *UpdateAPIKeyParams) error {
	_, err := q.exec(ctx, q.updateAPIKeyStmt, updateAPIKey,
		arg.Key,
		arg.ApiID,
		arg.Owner,
		arg.ApiID_2,
	)
	return err
}
