// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package models

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createAPIStmt, err = db.PrepareContext(ctx, createAPI); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAPI: %w", err)
	}
	if q.createAPIKeyStmt, err = db.PrepareContext(ctx, createAPIKey); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAPIKey: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteAPIStmt, err = db.PrepareContext(ctx, deleteAPI); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAPI: %w", err)
	}
	if q.deleteAPIKeyStmt, err = db.PrepareContext(ctx, deleteAPIKey); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAPIKey: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.getAPIStmt, err = db.PrepareContext(ctx, getAPI); err != nil {
		return nil, fmt.Errorf("error preparing query GetAPI: %w", err)
	}
	if q.getAPIKeyStmt, err = db.PrepareContext(ctx, getAPIKey); err != nil {
		return nil, fmt.Errorf("error preparing query GetAPIKey: %w", err)
	}
	if q.getUserAuthStmt, err = db.PrepareContext(ctx, getUserAuth); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserAuth: %w", err)
	}
	if q.hardAPIKeyStmt, err = db.PrepareContext(ctx, hardAPIKey); err != nil {
		return nil, fmt.Errorf("error preparing query HardAPIKey: %w", err)
	}
	if q.hardDeleteAPIStmt, err = db.PrepareContext(ctx, hardDeleteAPI); err != nil {
		return nil, fmt.Errorf("error preparing query HardDeleteAPI: %w", err)
	}
	if q.hardDeleteUserStmt, err = db.PrepareContext(ctx, hardDeleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query HardDeleteUser: %w", err)
	}
	if q.updateAPIStmt, err = db.PrepareContext(ctx, updateAPI); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAPI: %w", err)
	}
	if q.updateAPIKeyStmt, err = db.PrepareContext(ctx, updateAPIKey); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAPIKey: %w", err)
	}
	if q.updatePasswordStmt, err = db.PrepareContext(ctx, updatePassword); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePassword: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createAPIStmt != nil {
		if cerr := q.createAPIStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAPIStmt: %w", cerr)
		}
	}
	if q.createAPIKeyStmt != nil {
		if cerr := q.createAPIKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAPIKeyStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteAPIStmt != nil {
		if cerr := q.deleteAPIStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAPIStmt: %w", cerr)
		}
	}
	if q.deleteAPIKeyStmt != nil {
		if cerr := q.deleteAPIKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAPIKeyStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.getAPIStmt != nil {
		if cerr := q.getAPIStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAPIStmt: %w", cerr)
		}
	}
	if q.getAPIKeyStmt != nil {
		if cerr := q.getAPIKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAPIKeyStmt: %w", cerr)
		}
	}
	if q.getUserAuthStmt != nil {
		if cerr := q.getUserAuthStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserAuthStmt: %w", cerr)
		}
	}
	if q.hardAPIKeyStmt != nil {
		if cerr := q.hardAPIKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing hardAPIKeyStmt: %w", cerr)
		}
	}
	if q.hardDeleteAPIStmt != nil {
		if cerr := q.hardDeleteAPIStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing hardDeleteAPIStmt: %w", cerr)
		}
	}
	if q.hardDeleteUserStmt != nil {
		if cerr := q.hardDeleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing hardDeleteUserStmt: %w", cerr)
		}
	}
	if q.updateAPIStmt != nil {
		if cerr := q.updateAPIStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAPIStmt: %w", cerr)
		}
	}
	if q.updateAPIKeyStmt != nil {
		if cerr := q.updateAPIKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAPIKeyStmt: %w", cerr)
		}
	}
	if q.updatePasswordStmt != nil {
		if cerr := q.updatePasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePasswordStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                 DBTX
	tx                 *sql.Tx
	createAPIStmt      *sql.Stmt
	createAPIKeyStmt   *sql.Stmt
	createUserStmt     *sql.Stmt
	deleteAPIStmt      *sql.Stmt
	deleteAPIKeyStmt   *sql.Stmt
	deleteUserStmt     *sql.Stmt
	getAPIStmt         *sql.Stmt
	getAPIKeyStmt      *sql.Stmt
	getUserAuthStmt    *sql.Stmt
	hardAPIKeyStmt     *sql.Stmt
	hardDeleteAPIStmt  *sql.Stmt
	hardDeleteUserStmt *sql.Stmt
	updateAPIStmt      *sql.Stmt
	updateAPIKeyStmt   *sql.Stmt
	updatePasswordStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                 tx,
		tx:                 tx,
		createAPIStmt:      q.createAPIStmt,
		createAPIKeyStmt:   q.createAPIKeyStmt,
		createUserStmt:     q.createUserStmt,
		deleteAPIStmt:      q.deleteAPIStmt,
		deleteAPIKeyStmt:   q.deleteAPIKeyStmt,
		deleteUserStmt:     q.deleteUserStmt,
		getAPIStmt:         q.getAPIStmt,
		getAPIKeyStmt:      q.getAPIKeyStmt,
		getUserAuthStmt:    q.getUserAuthStmt,
		hardAPIKeyStmt:     q.hardAPIKeyStmt,
		hardDeleteAPIStmt:  q.hardDeleteAPIStmt,
		hardDeleteUserStmt: q.hardDeleteUserStmt,
		updateAPIStmt:      q.updateAPIStmt,
		updateAPIKeyStmt:   q.updateAPIKeyStmt,
		updatePasswordStmt: q.updatePasswordStmt,
	}
}
