// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: news.sql

package model

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createNews = `-- name: CreateNews :exec
INSERT INTO news (
    md5_hash, title, url, description, content, source, publish_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
`

type CreateNewsParams struct {
	Md5Hash     string             `json:"md5_hash"`
	Title       string             `json:"title"`
	Url         string             `json:"url"`
	Description string             `json:"description"`
	Content     string             `json:"content"`
	Source      pgtype.Text        `json:"source"`
	PublishAt   pgtype.Timestamptz `json:"publish_at"`
}

func (q *Queries) CreateNews(ctx context.Context, arg *CreateNewsParams) error {
	_, err := q.db.Exec(ctx, createNews,
		arg.Md5Hash,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.Content,
		arg.Source,
		arg.PublishAt,
	)
	return err
}

const deleteNews = `-- name: DeleteNews :exec
UPDATE news
   SET deleted_at = CURRENT_TIMESTAMP
 WHERE id = $1
`

func (q *Queries) DeleteNews(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteNews, id)
	return err
}

const deleteNewsPublishBefore = `-- name: DeleteNewsPublishBefore :exec
UPDATE news
   SET deleted_at = CURRENT_TIMESTAMP
 WHERE publish_at < $1
`

func (q *Queries) DeleteNewsPublishBefore(ctx context.Context, beforeTime pgtype.Timestamptz) error {
	_, err := q.db.Exec(ctx, deleteNewsPublishBefore, beforeTime)
	return err
}

const getNewsByKeywords = `-- name: GetNewsByKeywords :many
SELECT id, md5_hash, title, url, description, content, source, publish_at, created_at, updated_at, deleted_at
  FROM news
 WHERE id = ANY(
  SELECT news_id
    FROM keywords
   WHERE keyword = ANY($1::string[])
 )
`

func (q *Queries) GetNewsByKeywords(ctx context.Context, keywords []string) ([]*News, error) {
	rows, err := q.db.Query(ctx, getNewsByKeywords, keywords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*News
	for rows.Next() {
		var i News
		if err := rows.Scan(
			&i.ID,
			&i.Md5Hash,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.Content,
			&i.Source,
			&i.PublishAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNewsByMD5Hash = `-- name: GetNewsByMD5Hash :one
SELECT id, md5_hash, title, url, description, content, source, publish_at, created_at, updated_at, deleted_at
  FROM news
 WHERE md5_hash = $1 
   AND deleted_at IS NULL
`

func (q *Queries) GetNewsByMD5Hash(ctx context.Context, md5Hash string) (*News, error) {
	row := q.db.QueryRow(ctx, getNewsByMD5Hash, md5Hash)
	var i News
	err := row.Scan(
		&i.ID,
		&i.Md5Hash,
		&i.Title,
		&i.Url,
		&i.Description,
		&i.Content,
		&i.Source,
		&i.PublishAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const getNewsPublishBetween = `-- name: GetNewsPublishBetween :many
SELECT id, md5_hash, title, url, description, content, source, publish_at, created_at, updated_at, deleted_at
  FROM news
 WHERE publish_at BETWEEN timestamp $1 AND $2
   AND deleted_at IS NULL
 ORDER BY publish_at
`

type GetNewsPublishBetweenParams struct {
	FromTime pgtype.Timestamptz `json:"from_time"`
	ToTime   pgtype.Timestamptz `json:"to_time"`
}

func (q *Queries) GetNewsPublishBetween(ctx context.Context, arg *GetNewsPublishBetweenParams) ([]*News, error) {
	rows, err := q.db.Query(ctx, getNewsPublishBetween, arg.FromTime, arg.ToTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*News
	for rows.Next() {
		var i News
		if err := rows.Scan(
			&i.ID,
			&i.Md5Hash,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.Content,
			&i.Source,
			&i.PublishAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const hardDeleteNews = `-- name: HardDeleteNews :exec
DELETE FROM news
 WHERE deleted_at IS NOT NULL
`

func (q *Queries) HardDeleteNews(ctx context.Context) error {
	_, err := q.db.Exec(ctx, hardDeleteNews)
	return err
}

const listRecentNNews = `-- name: ListRecentNNews :many
SELECT id, md5_hash, title, url, description, content, source, publish_at, created_at, updated_at, deleted_at
  FROM news
 WHERE deleted_at IS NULL
 ORDER BY publish_at
 LIMIT $1
`

func (q *Queries) ListRecentNNews(ctx context.Context, n int32) ([]*News, error) {
	rows, err := q.db.Query(ctx, listRecentNNews, n)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*News
	for rows.Next() {
		var i News
		if err := rows.Scan(
			&i.ID,
			&i.Md5Hash,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.Content,
			&i.Source,
			&i.PublishAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
